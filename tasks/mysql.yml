---
# - name: "rm {{ mysql_root_home }}/.my.cnf"
#   shell: >
#     rm {{ mysql_root_home }}/.my.cnf
#   ignore_errors: yes

# - name: "rm {{ mysql_root_home }}/.my.cnf"
#   shell: >
#     rm {{ mysql_user_home }}/.my.cnf
#   ignore_errors: yes

####################################################################
#  Install/Setup MySQL
####################################################################
- name: Install/Setup MySQL
  package:
    name: '{{ item }}'
    state: latest
  with_items:
    - mysql-server
    - python3-mysqldb
    - python3-pip
    - python-pymysql
    - python3-pymysql

- name: Ensure MySQL packages are installed.
  apt:
    name: "{{ mysql_packages }}"
    state: present
  register: deb_mysql_install_packages

- name: Determine required MySQL Python libraries.
  set_fact:
    deb_mysql_python_package: "{% if 'python3' in ansible_python_interpreter|default('') %}python3-mysqldb{% else %}python-mysqldb{% endif %}"

- name: Ensure MySQL Python libraries are installed.
  apt: "name={{ deb_mysql_python_package }} state=present"

- name: Ensure MySQL packages are installed.
  apt: "name={{ item }} state=present"
  with_items: "{{ mysql_packages }}"
  register: deb_mysql_install_packages

- name: Start MySQL service
  service:
    name: mysql.service
    state: restarted
    enabled: yes

- name: Get MySQL version.
  command: 'mysql --version'
  register: mysql_cli_version
  changed_when: false
  check_mode: false

- name: Check if MySQL packages were installed.
  set_fact:
    mysql_install_packages: "{{ (rh_mysql_install_packages is defined and rh_mysql_install_packages.changed)
      or (deb_mysql_install_packages is defined and deb_mysql_install_packages.changed)
      or (arch_mysql_install_packages is defined and arch_mysql_install_packages.changed) }}"

####################################################################
# Secure MySQL setup
####################################################################
# - name: Delete anonymous MySQL server user
#   action: mysql_user user="" host="{{ ansible_hostname }}" state="absent"
#   ignore_errors: yes

# - name: Delete anonymous MySQL server user for localhost
#   action: mysql_user user="" state="absent"
#   ignore_errors: yes

# - name: Remove the MySQL test database
#   action: mysql_db db=test state=absent
#   ignore_errors: yes

# - name: Ensure default user is present.
#   mysql_user:
#     name: "{{ mysql_user_name }}"
#     host: 'localhost'
#     password: "{{ mysql_user_password }}"
#     priv: '*.*:ALL,GRANT'
#     state: present
#   when: mysql_user_name != mysql_root_username

# - name: Change root user password on first run
#   mysql_user: login_user=root
#               login_password=''
#               name={{ mysql_root_user }}
#               password={{ mysql_root_password }}
#               priv=*.*:ALL,GRANT
#               host={{ item }}
#   with_items:
#     - "{{ ansible_hostname }}"
#     - 127.0.0.1
#     - ::1
#     - localhost
#   ignore_errors: yes
#   become: yes

- name: Ensure default user is present.
  mysql_user:
    name: "{{ mysql_user_name }}"
    host: 'localhost'
    password: "{{ mysql_user_password }}"
    priv: '*.*:ALL,GRANT'
    state: present
  when: mysql_user_name != mysql_root_username

# # Has to be after the password assignment, for idempotency.
# - name: Copy user-my.cnf file with password credentials.
#   template:
#     src: "user-my.cnf.j2"
#     dest: "{{ mysql_user_home }}/.my.cnf"
#     owner: "{{ mysql_user_name }}"
#     mode: 0600
#   when: >
#     mysql_user_name != mysql_root_username
#     and (mysql_install_packages | bool or mysql_user_password_update)

# # Has to be after the password assignment, for idempotency.
# - name: "create {{ mysql_user_home }}/.my.cnf"
#   copy:
#     content: |

#       [client]
#       user="{{ mysql_user_name }}"
#       password="{{ mysql_root_password }}"
#     dest: "{{ mysql_user_home }}/.my.cnf"
#     owner: "root"
#     group: "root"
#     mode: 0600
#   when: >
#     mysql_user_name != mysql_root_username
#     and (mysql_install_packages | bool or mysql_user_password_update)

- name: Disallow root login remotely
  command: 'mysql -NBe "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='{{ mysql_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false

- name: Get list of hosts for the root user.
  command: mysql -NBe
    "SELECT Host
    FROM mysql.user
    WHERE User = '{{ mysql_root_username }}'
    ORDER BY (Host='localhost') ASC"
  register: mysql_root_hosts
  changed_when: false
  check_mode: false
  when: mysql_install_packages | bool or mysql_root_password_update

- debug:
    var: mysql_install_packages

- debug:
    var: mysql_root_password_update

- debug:
    var: mysql_cli_version

- debug:
    var: mysql_root_hosts

# Note: We do not use mysql_user for this operation, as it doesn't always update
# the root password correctly. See: https://goo.gl/MSOejW
# Set root password for MySQL >= 5.7.x.
- name: Update MySQL root password for localhost root account (5.7.x).
  shell: >
    mysql -u root -NBe
    'ALTER USER "{{ mysql_root_username }}"@"{{ item }}"
    IDENTIFIED WITH mysql_native_password BY "{{ mysql_root_password }}";'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: >
    ((mysql_install_packages | bool) or mysql_root_password_update)
    and ('5.7.' in mysql_cli_version.stdout or '8.0.' in mysql_cli_version.stdout)

# Set root password for MySQL < 5.7.x.
- name: Update MySQL root password for localhost root account (< 5.7.x).
  shell: >
    mysql -NBe
    'SET PASSWORD FOR "{{ mysql_root_username }}"@"{{ item }}" = PASSWORD("{{ mysql_root_password }}");'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: >
    ((mysql_install_packages | bool) or mysql_root_password_update)
    and ('5.7.' not in mysql_cli_version.stdout and '8.0.' not in mysql_cli_version.stdout)

# Has to be after the root password assignment, for idempotency.
# - name: Copy .my.cnf file with root password credentials.
#   template:
#     src: "root-my.cnf.j2"
#     dest: "{{ mysql_root_home }}/.my.cnf"
#     owner: root
#     group: root
#     mode: 0600
#   when: mysql_install_packages | bool or mysql_root_password_update

# Has to be after the root password assignment, for idempotency.
- name: "create {{ mysql_root_home }}/.my.cnf"
  copy:
    content: |

      [client]
      user="{{ mysql_root_username }}"
      password="{{ mysql_root_password }}"
    dest: "{{ mysql_root_home }}/.my.cnf"
    owner: "root"
    group: "root"
    mode: 0600
  when: mysql_install_packages | bool or mysql_root_password_update

- name: Get list of hosts for the anonymous user.
  command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = ""'
  register: mysql_anonymous_hosts
  changed_when: false
  check_mode: false

- name: Remove anonymous MySQL users.
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
  with_items: "{{ mysql_anonymous_hosts.stdout_lines|default([]) }}"

- name: Remove MySQL test database.
  mysql_db: "name='test' state=absent"


####################################################################
#  Setup Kolide database
####################################################################
- name: Create Kolide database
  shell: mysql -u {{ mysql_root_user }} --password={{ mysql_root_password }} -e "CREATE DATABASE {{ mysql_kolide_dbname }};"
  ignore_errors: yes
  register: mysql_result
  failed_when: "'database exists' in mysql_result.stdout"
  become: yes

- name: Create Kolide database user
  mysql_user:
    name: '{{ mysql_kolide_user }}'
    password: '{{ mysql_kolide_pass }}'
    priv: '{{ mysql_kolide_dbname }}.*:ALL'
    state: present
    login_user: '{{ mysql_root_user }}'
    login_password: '{{ mysql_root_password }}'
    host: '{{ mysql_kolide_hosts }}'
  ignore_errors: yes
  become: yes

####################################################################
#  Slack notification
####################################################################
- name: Send slack notification when done
  slack:
    token: "{{ slack_token }}"
    msg: '{{ ansible_nodename }}:{{ ansible_default_ipv4.address }} - Finished setting up mysql - {{ ansible_nodename }}'
    channel: "{{ slack_channel }}"
  when: slack_token is undefined
